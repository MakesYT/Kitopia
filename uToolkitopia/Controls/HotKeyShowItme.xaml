<!--
    This Source Code Form is subject to the terms of the MIT License.
    If a copy of the MIT was not distributed with this file, You can obtain one at https://opensource.org/licenses/MIT.
    Copyright (C) Leszek Pomianowski and WPF UI Contributors.
    All Rights Reserved.
    
    Based on Microsoft XAML for Win UI
    Copyright (c) Microsoft Corporation. All Rights Reserved.
-->

<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls1="clr-namespace:Kitopia.Controls">

    <Thickness x:Key="ButtonPadding">11,5,11,6</Thickness>
    <Thickness x:Key="ButtonBorderThemeThickness">1</Thickness>
    <Thickness x:Key="ButtonIconMargin">0,0,8,0</Thickness>

    <Style x:Key="DefaultUiButtonStyle" TargetType="{x:Type controls1:HotKeyShowItme}">
        <!--  Universal WPF UI focus  -->
        <Setter Property="FocusVisualStyle" Value="{DynamicResource DefaultControlFocusVisualStyle}" />
        <!--  Universal WPF UI focus  -->
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource ControlFillColorDefault}" />
            </Setter.Value>
        </Setter>
        <Setter Property="MouseOverBackground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource ControlFillColorSecondary}" />
            </Setter.Value>
        </Setter>
        <Setter Property="PressedBackground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource ControlFillColorTertiary}" />
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Color="White" />
            </Setter.Value>
        </Setter>
        <Setter Property="PressedForeground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource TextFillColorSecondary}" />
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlElevationBorderBrush}" />
        <Setter Property="PressedBorderBrush" Value="{DynamicResource ControlStrokeColorDefaultBrush}" />
        <Setter Property="MouseOverBorderBrush" Value="{DynamicResource ControlElevationBorderBrush}" />
        <Setter Property="BorderThickness" Value="{StaticResource ButtonBorderThemeThickness}" />
        <Setter Property="Padding" Value="{StaticResource ButtonPadding}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Border.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
        <Setter Property="Appearance" Value="Primary" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="IsEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls1:HotKeyShowItme}">
                    <Border
                        x:Name="ContentBorder"
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        MinWidth="{TemplateBinding MinWidth}"
                        MinHeight="{TemplateBinding MinHeight}"
                        HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalAlignment}"
                        Background="{TemplateBinding Background}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}">
                        <Border
                            Padding="{TemplateBinding Padding}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding Border.CornerRadius}">
                            <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>

                                <ContentPresenter
                                    x:Name="ControlIcon"
                                    Grid.Column="0"
                                    Margin="{StaticResource ButtonIconMargin}"
                                    VerticalAlignment="Center"
                                    Content="{TemplateBinding Icon}"
                                    Focusable="False"
                                    TextElement.FontSize="{Binding Path=FontSize,RelativeSource={RelativeSource TemplatedParent}}"
                                    TextElement.Foreground="{TemplateBinding Foreground}" />

                                <ContentPresenter
                                    x:Name="ContentPresenter"
                                    Grid.Column="1"
                                    VerticalAlignment="Center"
                                    Content="{TemplateBinding Content}"
                                    TextElement.Foreground="White" />
                            </Grid>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False" />
                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter TargetName="ControlIcon" Property="Margin" Value="0" />
                        </Trigger>
                        <Trigger Property="Content" Value="">
                            <Setter TargetName="ControlIcon" Property="Margin" Value="0" />
                        </Trigger>
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter TargetName="ControlIcon" Property="Margin" Value="0" />
                            <Setter TargetName="ControlIcon" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!--  TRANSPARENT  -->
            <Trigger Property="Appearance" Value="Transparent">
                <Setter Property="Background" Value="Transparent" />
            </Trigger>

            <!--  PRIMARY  -->
            <Trigger Property="Appearance" Value="Primary">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource SystemAccentColorSecondary}" />
                    </Setter.Value>
                </Setter>
                <Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource TextOnAccentFillColorPrimary}" />
                    </Setter.Value>
                </Setter>
            </Trigger>

            <!--  DARK  -->
            <Trigger Property="Appearance" Value="Dark">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource ControlStrongFillColorDark}" />
                    </Setter.Value>
                </Setter>
                <Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource TextFillColorLightPrimary}" />
                    </Setter.Value>
                </Setter>
            </Trigger>

            <!--  LIGHT  -->
            <Trigger Property="Appearance" Value="Light">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource ControlStrongFillColorLight}" />
                    </Setter.Value>
                </Setter>
                <Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource TextFillColorDarkPrimary}" />
                    </Setter.Value>
                </Setter>
            </Trigger>

            <!--  INFO  -->
            <Trigger Property="Appearance" Value="Info">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource PaletteLightBlueColor}" />
                    </Setter.Value>
                </Setter>
                <Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource TextFillColorLightPrimary}" />
                    </Setter.Value>
                </Setter>
            </Trigger>

            <!--  DANGER  -->
            <Trigger Property="Appearance" Value="Danger">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource PaletteRedColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>

            <!--  SUCCESS  -->
            <Trigger Property="Appearance" Value="Success">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource PaletteGreenColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>

            <!--  CAUTION  -->
            <Trigger Property="Appearance" Value="Caution">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource PaletteOrangeColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style BasedOn="{StaticResource DefaultUiButtonStyle}" TargetType="{x:Type controls1:HotKeyShowItme}" />

</ResourceDictionary>